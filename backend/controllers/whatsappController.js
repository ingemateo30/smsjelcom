require("dotenv").config();
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const WhatsAppReminder = require("../models/WhatsAppReminder");
const Cita = require("../models/Cancelacion");
const db = require("../config/db");

const usuariosEnEsperaDeMotivo = new Map();

// Configuraci√≥n mejorada de UltraMsg
const getUltraMsgConfig = () => ({
  instance_id: process.env.ULTRAMSG_INSTANCE_ID,
  token: process.env.ULTRAMSG_TOKEN,
  base_url: 'https://api.ultramsg.com'
});

// Funci√≥n para enviar imagen + texto (basada en NORCAM)
async function enviarImagenTexto(numero, mensaje, rutaImagen = null) {
  try {
    console.log(`üñºÔ∏è Enviando mensaje a ${numero}...`);

    const config = getUltraMsgConfig();

    if (rutaImagen && fs.existsSync(rutaImagen)) {
      // Env√≠o con imagen
      const imageBuffer = fs.readFileSync(rutaImagen);
      const imageBase64 = imageBuffer.toString('base64');
      const mimeType = obtenerMimeType(rutaImagen);
      const imagenUrl = `data:${mimeType};base64,${imageBase64}`;

      const url = `${config.base_url}/${config.instance_id}/messages/image`;
      const postData = {
        token: config.token,
        to: numero,
        image: imagenUrl,
        caption: mensaje
      };

      const response = await axios.post(url, postData, {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        timeout: 45000
      });

      return procesarRespuesta(response, numero);
    } else {
      // Env√≠o solo texto
      const url = `${config.base_url}/${config.instance_id}/messages/chat`;
      const postData = {
        token: config.token,
        to: numero,
        body: mensaje
      };

      const response = await axios.post(url, postData, {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        timeout: 30000
      });

      return procesarRespuesta(response, numero);
    }

  } catch (error) {
    const errorMsg = error.response?.data?.error || error.message;
    console.log(`‚ùå Error enviando a ${numero}: ${errorMsg}`);
    return { success: false, numero, error: errorMsg };
  }
}

// Funci√≥n para procesar respuesta de la API
function procesarRespuesta(response, numero) {
  console.log(`üì§ Respuesta de ${numero}:`, response.data);

  const esExitoso = response.data.sent === "true" ||
    response.data.sent === true ||
    response.data.id ||
    response.data.message === "ok";

  if (esExitoso) {
    console.log(`‚úÖ Mensaje enviado a ${numero}`);
    return { success: true, numero, response: response.data };
  } else {
    console.log(`‚ùå Error: ${response.data.error || 'Respuesta inesperada'}`);
    return { success: false, numero, error: response.data.error };
  }
}

// Funci√≥n auxiliar para MIME type
function obtenerMimeType(rutaArchivo) {
  const extension = path.extname(rutaArchivo).toLowerCase();
  switch (extension) {
    case '.jpg':
    case '.jpeg':
      return 'image/jpeg';
    case '.png':
      return 'image/png';
    case '.gif':
      return 'image/gif';
    case '.webp':
      return 'image/webp';
    default:
      return 'image/jpeg';
  }
}

// Funci√≥n para esperar (con mejor control)
function esperar(milisegundos) {
  return new Promise(resolve => setTimeout(resolve, milisegundos));
}

// Funci√≥n para buscar imagen autom√°ticamente
function buscarImagen(nombreBase = 'recordatorio_cita') {
  const extensiones = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
  const carpetas = [__dirname, path.join(__dirname, '..'), path.join(__dirname, '../public/images')];

  for (const carpeta of carpetas) {
    for (const ext of extensiones) {
      const rutaCompleta = path.join(carpeta, nombreBase + ext);
      if (fs.existsSync(rutaCompleta)) {
        return rutaCompleta;
      }
    }
  }
  return null;
}

// Funci√≥n principal mejorada para recordatorios
function obtenerDireccionPorEspecialidad(servicio) {
  const servicioLower = servicio.toLowerCase().trim();

  // Procedimientos de cardiolog√≠a - direcci√≥n espec√≠fica
  if (servicioLower.includes('cardiologia') && servicioLower.includes('procedimiento')) {
    return {
      direccion: "Calle 16 No. 9-76",
      sede: "Procedimientos de Cardiolog√≠a"
    };
  }

  // Hospital sede principal - Carrera 5 # 9-102
  const especialidadesSedePrincipal = [
    'otorrino', 'otorrinolaringologia',
    'anestesia', 'anestesiologia',
    'cardiologia consulta', 'Cardiolog√≠a',
    'endoscopia',
    'colonoscopia',
    'gastroenterologia',
    'fonoaudiologia procedimientos', 'fonoaudiologia','Qx dermatol√≥gica ',
    'Qx general'

  ];

  const esSedePrincipal = especialidadesSedePrincipal.some(esp =>
    servicioLower.includes(esp)
  );

  if (esSedePrincipal) {
    return {
      direccion: "Carrera 5 # 9-102",
      sede: "Hospital Regional de San Gil - Sede Principal"
    };
  }

  // CES Avenida Santander 24A-48
  const especialidadesCES = [
    'Adulto mayor 45',
    'Citolog√≠a',
    'Control prenatal',
    'Planificaci√≥n familiar',
    'Pos parto',
    'medicina general',
    'odontologia',
    'Ecografias',
    'Examen de seno',
    'cirugia general',
    'cirugia maxilofacial',
    'cirugia pediatrica',
    'dermatologia',
    'ginecologia',
    'medicina familiar',
    'nutricion',
    'neurologia',
    'neurocirugia',
    'oftalmologia',
    'optometria',
    'obstetricia',
    'ortopedia y traumatologia',
    'pediatria',
    'psiquiatria',
    'urologia',
    'psicologia',
    'post parto',
    'crecimiento y desarrollo',
    'joven',
    'adulto',
    'citologia',
    'salud oral',
    'riesgo cardiovascular',
    'planificacion'
  ];

  const esCES = especialidadesCES.some(esp =>
    servicioLower.includes(esp)
  );

  if (esCES) {
    return {
      direccion: "Avenida Santander 24A-48",
      sede: "consulta externa CES Hospital Regional de San Gil"
    };
  }

  // Endodoncia - direcci√≥n especial
  if (servicioLower.includes('endodoncia')) {
    return {
      direccion: "Cra 14A # 29A-27 Edificio PSI Local 2 Exterior, Barrio Porvenir",
      sede: "Consulta Especializada de Endodoncia",
      nota: "‚ö†Ô∏è *IMPORTANTE:* Debe dirigirse primero al CES (Avenida Santander 24A-48) antes de ir a esta direcci√≥n."
    };
  }

  // Por defecto - Sede Principal
  return {
    direccion: "Carrera 5 # 9-102",
    sede: "Hospital Regional de San Gil - Sede Principal"
  };
}


// Funci√≥n principal mejorada para recordatorios con direcciones
const sendWhatsAppReminder = async (req, res) => {
  try {
    console.log('üöÄ INICIANDO ENV√çO DE RECORDATORIOS MASIVOS\n');

    const reminders = await WhatsAppReminder.getRemindersForTomorrow();

    if (reminders.length === 0) {
      return res.status(200).json({ message: "No hay citas para ma√±ana." });
    }

    // Buscar imagen opcional
    const rutaImagen = buscarImagen('recordatorio_hospital');
    if (rutaImagen) {
      console.log(`‚úÖ Imagen encontrada: ${rutaImagen}`);
    } else {
      console.log('‚ÑπÔ∏è No se encontr√≥ imagen, enviando solo texto');
    }

    console.log(`üì± Enviando recordatorios a ${reminders.length} pacientes`);
    console.log(`‚è±Ô∏è Pausa entre env√≠os: 20 segundos\n`);

    const resultados = {
      exitosos: 0,
      fallidos: 0,
      errores: []
    };

    // Enviar con pausas inteligentes (m√°ximo 20 por minuto)
    for (let i = 0; i < reminders.length; i++) {
      const reminder = reminders[i];

      // Obtener direcci√≥n seg√∫n especialidad
      const infoUbicacion = obtenerDireccionPorEspecialidad(reminder.servicio);

      // Mensaje personalizado y mejorado con direcci√≥n
      let mensaje = `

*Paciente:* ${reminder.nombre_paciente}
*Fecha:* ${reminder.fecha}
*Hora:* ${reminder.hora}
*Servicio:* ${reminder.servicio}
*Profesional:* ${reminder.profesional}

üìç *DIRECCI√ìN:*
${infoUbicacion.sede}
${infoUbicacion.direccion}
San Gil, Santander`;

      if (infoUbicacion.nota) {
        mensaje += `\n\nüìå ${infoUbicacion.nota}`;
      }

      mensaje += `

‚ö†Ô∏è *IMPORTANTE:* 
‚Ä¢ Llegar con al menos *40 minutos de anticipaci√≥n*
‚Ä¢ Traer orden,autorizaci√≥n y ex√°menes previos
‚Ä¢ Documento de identidad original

üìû *¬øNo puede asistir o desea reagendar?*
Comun√≠quese al 607 7249701

*Gracias por su puntualidad y confianza.*

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üîí *Tratamiento de Datos Personales:*
Este mensaje se env√≠a con base en nuestra pol√≠tica de tratamiento de datos publicada en: 
www.hregionalsangil.gov.co

Si no desea seguir recibiendo este tipo de mensajes, puede solicitarlo al correo:
protecciondatos.hrsg@gmail.com
`;

      console.log(`[${i + 1}/${reminders.length}] Enviando a ${reminder.telefono} (${reminder.nombre_paciente})`);
      console.log(`   üìç Direcci√≥n: ${infoUbicacion.direccion}`);

      // Formatear n√∫mero (agregar +57 si no lo tiene)
      let numeroFormateado = reminder.telefono;
      if (!numeroFormateado.startsWith('57')) {
        numeroFormateado = `57${numeroFormateado}`;
      }
      if (!numeroFormateado.startsWith('+')) {
        numeroFormateado = `+${numeroFormateado}`;
      }

      try {
        const resultado = await enviarImagenTexto(numeroFormateado, mensaje, rutaImagen);

        if (resultado.success) {
          resultados.exitosos++;
          await WhatsAppReminder.updateReminderStatus(reminder.id, "recordatorio enviado");
          console.log(`   ‚úÖ Enviado exitosamente`);
        } else {
          resultados.fallidos++;
          resultados.errores.push({
            numero: numeroFormateado,
            paciente: reminder.nombre_paciente,
            error: resultado.error
          });
          console.log(`   ‚ùå Error: ${resultado.error}`);
        }
      } catch (error) {
        resultados.fallidos++;
        resultados.errores.push({
          numero: numeroFormateado,
          paciente: reminder.nombre_paciente,
          error: error.message
        });
        console.error(`   ‚ùå Error inesperado: ${error.message}`);
      }

      // Pausa inteligente entre env√≠os
      if (i < reminders.length - 1) {
        // Pausa de 3 segundos (20 mensajes por minuto)
        console.log('   ‚è≥ Pausa de 20 segundos...');
        await esperar(20000);

        // Pausa extra cada 10 mensajes (para mayor seguridad)
        if ((i + 1) % 10 === 0) {
          console.log('   ‚è∏Ô∏è Pausa extendida de 60 segundos cada 10 mensajes...');
          await esperar(60000);
        }
      }
    }

    // Resumen detallado
    console.log('\n' + '='.repeat(60));
    console.log('üìä RESUMEN FINAL DE RECORDATORIOS:');
    console.log(`‚úÖ Recordatorios enviados: ${resultados.exitosos}`);
    console.log(`‚ùå Recordatorios fallidos: ${resultados.fallidos}`);
    console.log(`üì± Total procesados: ${reminders.length}`);
    console.log(`üìà Tasa de √©xito: ${((resultados.exitosos / reminders.length) * 100).toFixed(1)}%`);

    if (resultados.errores.length > 0) {
      console.log('\nüîç ERRORES DETALLADOS:');
      resultados.errores.forEach(error => {
        console.log(`- ${error.paciente} (${error.numero}): ${error.error}`);
      });
    }

    // Guardar reporte detallado
    const reporte = {
      fecha: new Date().toISOString(),
      tipo: 'recordatorios_citas',
      total: reminders.length,
      exitosos: resultados.exitosos,
      fallidos: resultados.fallidos,
      tasa_exito: ((resultados.exitosos / reminders.length) * 100).toFixed(1) + '%',
      imagen_utilizada: rutaImagen || 'sin_imagen',
      errores: resultados.errores,
      reminders_procesados: reminders.map(r => ({
        id: r.id,
        paciente: r.nombre_paciente,
        telefono: r.telefono,
        fecha: r.fecha,
        hora: r.hora,
        servicio: r.servicio,
        direccion_asignada: obtenerDireccionPorEspecialidad(r.servicio)
      }))
    };

    const nombreReporte = `reporte_recordatorios_${new Date().toISOString().split('T')[0]}.json`;
    fs.writeFileSync(nombreReporte, JSON.stringify(reporte, null, 2));
    console.log(`\nüíæ Reporte guardado en: ${nombreReporte}`);

    res.status(200).json({
      message: "Recordatorios enviados",
      enviados: resultados.exitosos,
      fallidos: resultados.fallidos,
      total: reminders.length,
      tasa_exito: ((resultados.exitosos / reminders.length) * 100).toFixed(1) + '%'
    });

  } catch (error) {
    console.error("‚ùå Error general en el env√≠o de recordatorios:", error);
    res.status(500).json({ error: "Error al enviar recordatorios." });
  }
};

// Funci√≥n mejorada para procesar respuestas
const processWhatsAppReply = async (req, res) => {
  try {
    const [rows] = await db.query(`
            SELECT 
                id, 
                numero, 
                mensaje, 
                fecha, 
                tipo,
                DATE_FORMAT(fecha, '%Y-%m-%d %H:%i:%s') as fecha_formateada
            FROM mensajes 
            ORDER BY fecha DESC
        `);

    if (rows.length === 0) {
      return res.status(404).json({ message: "No hay mensajes en la base de datos." });
    }

    const responses = rows.map(row => ({
      id: row.id,
      telefono: row.numero,
      nombre_paciente: row.numero, // Podr√≠as hacer un JOIN con tabla de pacientes
      fecha_cita: row.fecha_formateada,
      respuesta: row.mensaje,
      motivo: row.tipo,
      estado: clasificarRespuesta(row.mensaje)
    }));

    console.log(`üì® ${responses.length} respuestas obtenidas de la base de datos`);
    return res.json(responses);
  } catch (error) {
    console.error("‚ùå Error al obtener los mensajes:", error);
    return res.status(500).json({ error: "Error al obtener los mensajes." });
  }
};

// Funci√≥n para clasificar respuestas autom√°ticamente
function clasificarRespuesta(mensaje) {
  const mensajeLower = mensaje.toLowerCase().trim();

  if (mensajeLower.includes('s√≠') || mensajeLower.includes('si') || mensajeLower.includes('confirmo')) {
    return 'confirmada';
  } else if (mensajeLower.includes('no') || mensajeLower.includes('cancelo') || mensajeLower.includes('cancelar')) {
    return 'cancelada';
  } else if (mensajeLower.includes('reagendar') || mensajeLower.includes('cambiar') || mensajeLower.includes('reprogramar')) {
    return 'reagendar';
  } else {
    return 'pendiente_clasificacion';
  }
}

// Funci√≥n mejorada para env√≠o individual
const sendMessage = async (to, message, rutaImagen = null) => {
  try {
    // Formatear n√∫mero
    let numeroFormateado = to;
    if (!numeroFormateado.startsWith('57') && !numeroFormateado.startsWith('+57')) {
      numeroFormateado = `57${numeroFormateado}`;
    }
    if (!numeroFormateado.startsWith('+')) {
      numeroFormateado = `+${numeroFormateado}`;
    }

    const resultado = await enviarImagenTexto(numeroFormateado, message, rutaImagen);

    if (resultado.success) {
      console.log(`‚úÖ Mensaje individual enviado a ${numeroFormateado}`);
    } else {
      console.log(`‚ùå Error enviando mensaje individual a ${numeroFormateado}: ${resultado.error}`);
    }

    return resultado;
  } catch (error) {
    console.error("‚ùå Error al enviar mensaje individual:", error);
    return { success: false, error: error.message };
  }
};

// Funci√≥n para env√≠o masivo personalizado (similar a NORCAM)
const sendMassiveMessage = async (numeros, mensaje, rutaImagen = null) => {
  console.log('üöÄ INICIANDO ENV√çO MASIVO PERSONALIZADO\n');

  if (!Array.isArray(numeros) || numeros.length === 0) {
    throw new Error('Se requiere un array de n√∫meros v√°lido');
  }

  console.log(`üì± Enviando a ${numeros.length} n√∫meros`);
  console.log(`üìù Mensaje: "${mensaje.substring(0, 100)}..."`);
  console.log(`‚è±Ô∏è Pausa entre env√≠os: 3 segundos\n`);

  const resultados = {
    exitosos: 0,
    fallidos: 0,
    errores: []
  };

  for (let i = 0; i < numeros.length; i++) {
    const numero = numeros[i];
    console.log(`[${i + 1}/${numeros.length}] Enviando a ${numero}...`);

    const resultado = await enviarImagenTexto(numero, mensaje, rutaImagen);

    if (resultado.success) {
      resultados.exitosos++;
      console.log(`   ‚úÖ Enviado exitosamente`);
    } else {
      resultados.fallidos++;
      resultados.errores.push({ numero, error: resultado.error });
      console.log(`   ‚ùå Error: ${resultado.error}`);
    }

    // Pausa entre env√≠os
    if (i < numeros.length - 1) {
      console.log('   ‚è≥ Pausa de 3 segundos...');
      await esperar(3000);
    }
  }

  return resultados;
};

module.exports = {
  sendWhatsAppReminder,
  processWhatsAppReply,
  sendMessage,
  sendMassiveMessage,
  enviarImagenTexto
};




